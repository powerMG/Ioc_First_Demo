// <auto-generated />
using EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFramework.Migrations
{
    [DbContext(typeof(TreeDbContext))]
    [Migration("20180401154823_cms")]
    partial class cms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastLoginIp");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("LoginName");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("AdministratorID");

                    b.Property<int>("ChannelID");

                    b.Property<int>("ClassID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("Hits");

                    b.Property<string>("ImgSrc");

                    b.Property<string>("SearchText");

                    b.Property<int>("SortId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("TypeID");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UpdatedPersonID");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UpdatedPersonID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Models.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<int>("ChannelID");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ChannelID");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChannelName");

                    b.Property<int>("SortId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Models.Article", b =>
                {
                    b.HasOne("Models.Administrator", "Creater")
                        .WithMany()
                        .HasForeignKey("AdministratorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ArticleCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Administrator", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ArticleCategory", b =>
                {
                    b.HasOne("Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
